#include "InitPlan1560257414138.h"
/*PROTECTED REGION ID(eph1560257414138) ENABLED START*/
#include "behaviours/Initialization.h"
#include "engine/BehaviourPool.h"
//Add additional options here
/*PROTECTED REGION END*/

using namespace alica;

namespace alicaAutogenerated
{
    //Plan:InitPlan
    /* generated comment
        Task: init  -> EntryPoint-ID: 1560257602072
    */
    shared_ptr<UtilityFunction> UtilityFunction1560257414138::getUtilityFunction(Plan* plan)
    {
       /*PROTECTED REGION ID(1560257414138) ENABLED START*/
       std::shared_ptr<UtilityFunction> defaultFunction = std::make_shared<DefaultUtilityFunction>(plan);
       return defaultFunction;
        /*PROTECTED REGION END*/
    }
/*
*
* Transition:
*   - Name: 1558109687647, ConditionString: , Comment : MISSING_COMMENT
*
* Plans in State: 
*     
*   - Plan - (Name): default, (PlanID): 1560257552368 
*
* Tasks: 
*     
*   - init (1560257324591) (Entrypoint: 1560257602072)
*
* States: 
*     
*   - InitState (1560257595608)
*   - RuntimeState (1560260429771)
*
* Vars:
*/
int i = 0;
bool PreCondition1558109687647::evaluate(shared_ptr<RunningPlan> rp)
{
    /*PROTECTED REGION ID(1560260511449) ENABLED START*/
//    return implement_me_1560260511449;
    const State * state = rp->getActiveTriple().state;
    bool isFinished = true;

    for (const AbstractPlan * plan : state->getPlans()) {
        const Behaviour * behaviour = dynamic_cast<const Behaviour*>(plan) ;
        const std::map<const Behaviour*, std::shared_ptr<BasicBehaviour>>& availableBehaviours = rp->getAlicaEngine()->getBehaviourPool()->getAvailableBehaviours();
        std::shared_ptr<BasicBehaviour> basicBehaviour = availableBehaviours.at(behaviour);
        // std::cout << "\033[0;36m" << "IP: " << bb->getName() << "\033[0m" << std::endl;
        isFinished &= basicBehaviour->isFinished();
    }
    
    if (isFinished) {
        std::cout << "\033[0;36m" << "IP: PreCondition1558109687647 evaluate -> true" << "\033[0m" << std::endl;
        return true;
    }

    std::cout << "\033[0;36m" << "IP: PreCondition1558109687647 evaluate -> false" << "\033[0m" << std::endl;
    return false;
    /*PROTECTED REGION END*/
}
}
